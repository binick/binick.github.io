<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>a developer&#39;s journey to the cloud</title>
    <link>https://binick.github.io/</link>
    <description>Recent content on a developer&#39;s journey to the cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://binick.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to enrich a JWT issued by Active Directory B2C with custom policies.</title>
      <link>https://binick.github.io/posts/2021-12-25_enrich-a-jwt-token-with-ief/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://binick.github.io/posts/2021-12-25_enrich-a-jwt-token-with-ief/</guid>
      <description>Some time ago I was faced to need to enrich the JSON Web Token issued by Azure Active Directory B2C with information present on an external system.
To create this scenario, I leveraged the customization options offered by custom criteria.
Introduction to Identity Experience Framework. Identity Experience Framework represents the orchestration context of an interaction flow with Azure AD B2C. Custom criteria represent its expressiveness and allow us, developers, to define the internal flow through a series of one or moreá½º markup files.</description>
    </item>
    
    <item>
      <title>How to include code coverage in Azure DevOps pipeline?</title>
      <link>https://binick.github.io/posts/2021-01-02_azure-devops-code-coverage/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://binick.github.io/posts/2021-01-02_azure-devops-code-coverage/</guid>
      <description>By code coverage, we mean the action of trying to measure how much of our code has been executed by our tests. This sound like
 TL;DR
Untested code is a broken code. Definitely a strong statement but true in a way, we don&amp;rsquo;t always manage to get enough coverage. Often this happens because we don&amp;rsquo;t have time, other times because despite having written tests we are not able to read the metrics.</description>
    </item>
    
    <item>
      <title>SqlServer, EFCore, JSON ðŸ‘€</title>
      <link>https://binick.github.io/posts/2020-10-22_sqlserver-efcore-json/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://binick.github.io/posts/2020-10-22_sqlserver-efcore-json/</guid>
      <description>Sometimes we have been forced to work with JSON stored on table columns, it will have happened to you too!.
In this post I want to show you how work with that using EntityFramework Core
 dotnet / efcore   Clearly this is one of many possible ways.
We could talk for a long time about the choice to store JSON into RDBMS is a good or bad choice, but the intent of this post isn&amp;rsquo;t make a rant.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://binick.github.io/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://binick.github.io/about-me/</guid>
      <description>About me From the first basics in Pascal through Qt and QML, C# and SQL. Nicola is a full-stack code cleanliness maniac driven by the five SOLID principles.
His workbench is managed by chocolatey.org, wsl, and pwsh.
Passionate about containerization, cloud, and CI/CD processes he is also a strong supporter of TDD, throughout his career he has worked in both web-based and desktop/mobile environments.
He strongly believes in OSS to which he tries to contribute regularly.</description>
    </item>
    
    
    
  </channel>
</rss>
