[{"content":" body.dark .post-content img[src$=\"art-assemblies-graph.drawio.svg\"] { filter: invert(90%); }  I was recently asked to make a spike1 to evaluate the feasibility of implementing a micro frontends architecture with Blazor Server.\nI\u0026rsquo;ll tell you right now that it was a failure; but let\u0026rsquo;s go in order, first analyzing the declension of the term failure and the reasons that led me to use it and then try to recapitulate what emerged from this exploration that led me to this conclusion.\nI really like the definition he gives Treccani.\n Riconoscere l\u0026rsquo;inutilità dei propri sforzi, l\u0026rsquo;impossibilità e incapacità di raggiungere gli scopi fissati, rinunciando definitivamente alla lotta, all\u0026rsquo;azione.\n\u0026ndash; Treccani\n Which translated, hoping to do it correctly, would be \u0026ldquo;Recognizing the futility of one\u0026rsquo;s efforts, the impossibility and inability to achieve the set goals, definitely giving up the struggle, action.\u0026rdquo;\nI find it particularly proper because it uses the term fixed scopes, and so what are those purposes?\nContext matters. Nothing is done by accident, and this is certainly no exception. The work done is part of a larger context involving the need to migrate a number of ASP.NET MVC 5 applications to ASP.NET Core combined with a desire to make the current architecture more flexible by introducing the concept of modular-programming2.\nWithout getting around too much, the ultimate goal was to measure the feasibility of \u0026ldquo;realizing\u0026rdquo; a micro frontends architecture rendered server-side thanks to Blazor Server.\nIn this regard on Martin Fowler\u0026rsquo;s blog there is a nice article by Cam Jackson in which an overview of this architecture is given and from which I have translated their definition of micro frontends\n An architectural style where independently deliverable frontend applications are composed into a greater whole.\n\u0026ndash; Thoughtworks su martinfowler.com\n I put realize in quotes since the deployment of the various sites would only ever be done in a unified manner.\nPerhaps we would address this issue in a future post.\nNot all donuts come out with a hole. Don\u0026rsquo;t you know what it means? A clear explanation of what this Italian saying means I found in Clozemaster at point 4. Anyway, in two words it means that despite failure there is still something left to eat! \nGetting straight to the point, the main reason for the failure is related to the inability to give complete autonomy to the teams, for two main distinct reasons.\nHomonymy in support for pages and views Razor. To compose the site each frontends is contained within a Razor class library which also holds the view that is responsible for doing hosting of the Blazor application.\nThis is made possible by the functionality exposed by the SDK that allows a web app to use Razor views, pages, or layouts from class libraries and, as defined in the official documentation, in case of homonymy, precedence is given to the view, page, layout present in the web app.\nIn my case I am in a situation like this\n  Figure 1: an ASP.NET Core application referencing two Razor Class Library representing two modules.\n  where both modules internally make use of layouts contained at the /Pages/Shared/_Layout.cshtml path.\nHere, what would happen in this case is that one of the two teams would be displeased since, if it went well it would see its application rendered inside another layout, in the worst case one part or all of the views would go wrong (e.g., a view tries to enhance a section not declared in the layout). And we note well that both modules executed independently would behave as expected.\nRoutes, the basic route that does not want to work. I have that at least I could not get it to work.\nAgain, following the principle of autonomy, the desired was to separate the module routes from the container routes, for example within Module A we would find / or /index while from the container perspective the routes would be /module-a/ or /module-a/index.\nWhat I found was a \u0026ldquo;short blanket,\u0026rdquo; when internal navigation within the module worked, route generation using Anchor Tag Helper did not work (remember that this spike is the result of a migration process), as I used the middleware UsePathBaseMiddleware for the implementation of the requirement.\nThis resulted in the generation of links within the module to the outside always adding the /module-a at the top of the address even as the link should have simply pointed to the container.\nOtherwise using middleware I would have been forced to use the module name at the top of all @page directives.\nConclusions. Summing up what has been done and reasoning with a cool mind I could say that something good we can still take home, in fact, by not enabling support for Razor pages and views in a RCL3 and avoiding the use of Anchor Tag Helper in the HTML markup that contributes to view rendering we would not run into these problems.\n  A spike is a product development method originating from extreme programming that uses the simplest possible program to explore potential solutions. Source Wikipedia.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each holds everything necessary to execute only one aspect of the desired functionality. Source Wikipedia.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Razor Class libraries (RCLs) were introduced in ASP.NET Core 2.1 as a way to package and distribute UI components to be referenced and consumed within a host application.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://binick.blog/2022/05/22/micro-frontends-with-blazor-start-of-the-journay/","summary":"Not all donuts come out with a hole, but that doesn\u0026rsquo;t mean there isn\u0026rsquo;t good in them. I stumbled upon one of these in an attempt to implement a micro frontends architecture with Blazor Server.","title":"Micro frontends and Blazor Server, the beginning of the journey"},{"content":"I\u0026rsquo;m not a writer, I\u0026rsquo;ve never been one, and I\u0026rsquo;ve known this since my school essays. Every time I passed the column and a half it was a challenge.\nPublishing articles on a regular basis takes up a lot of my time, and not just strictly for writing. So I took inspiration from Troy Hunt and thought that creating a monthly summary to update you on my current status and possible future directions might be a good investment of time.\nThis thing, if I can pursue it over time, will also be useful to me tomorrow.\nRecap 0. Exactly one month ago today I announced a new side project. Well, I managed to create the first strategy regarding resource naming in Azure.\nThe next step is to define the other two strategies, concerning localisation and tagging.\nI also plan to create a library in Python so that I can integrate it into the Azure CLI.\nReferences.  Build your own Azure CLI Extensions: great article on how to create an extension to the Azure CLI.  ","permalink":"https://binick.blog/2022/04/29/0/","summary":"I\u0026rsquo;m not a writer, I\u0026rsquo;ve never been one, and I\u0026rsquo;ve known this since my school essays. Every time I passed the column and a half it was a challenge.\nPublishing articles on a regular basis takes up a lot of my time, and not just strictly for writing. So I took inspiration from Troy Hunt and thought that creating a monthly summary to update you on my current status and possible future directions might be a good investment of time.","title":"Monthly recap 0"},{"content":"A few years ago, when I was commuting to work by car, there was a tree-lined stretch of country road along a stream. Within this area there was a very narrow chicane at the exit immediately following a slight descent that followed a long straight. Given the presence of the stream and the permanent shade caused by the trees, it was not uncommon that on some winter mornings there was the presence of ice.\nI never had any accidents there as I was aware of the potential danger and even though the straightaway led to pushing on the accelerator I held back.\nWhat do I want to tell you with this anecdote?\nThat prevention is better than cure?\nNot really, the message is more subtle and is about instinct and consciousness.\nWhat if someone just happened to walk by on one of those mornings?\nAnd maybe even late for his appointment?\nIn all likelihood they would be forced to call the tow truck as they would be unaware of the presence of ice and would step on the brake pedal to reduce their speed on the curve. With consequent loss of grip and a car in the ditch.\nWhat would be the potential consequences?\nLet\u0026rsquo;s assume that after this unfortunate \u0026ldquo;adventure\u0026rdquo; the driver gets out of the car unharmed, what would be the other consequences?\nI would say two, a lightened wallet and a missed appointment.\nA typical approach to OpEx. I guess you are wondering what is the purpose and the reason of this parable.\nYou must know that some time ago I attended some meetings about the migration of a business application for internal use in Azure in which many issues arose due to the permissions assigned to users.\nProblems that have caused the postponement of the production release of a business application for internal use by more than two weeks.\nLet\u0026rsquo;s try, with not exactly little effort, to transpose the parable of the unfortunate driver within this context; we can identify the road as the cloud, the person driving the car as the company. And I\u0026rsquo;d say let\u0026rsquo;s stop there for now.\nTypically when a company approaches the cloud one of the main concerns is cost management1.\nImagine being a member of the security operations team, used to operating on a predetermined set of machines, who now finds himself with a potentially infinite fleet of machines and a warning from his area manager telling him he must contain his expenses.\nThe only thing it knows of that is more like what it has used so far is the role-based access control of Active Directory which finds its counterpart Azure RBAC also configurable from Azure Active Directory.\nWhat would you do? I think I would limit access to all users by giving only the minimum permissions necessary to members of the development team, but I think you would do the same.\nAnd that\u0026rsquo;s what the team did, so they set up two resource groups, one to house all the resources related to networking issues and one for the development team giving them the role of Contributor for the latter.\nSlipping into misuse of resource groups improperly in that some resources such as for example the Azure Kubernetes service relies on a third resource group to host agent pool nodes shared between us and the service itself.\nEducate rather than impose. The SecOps team failed because they were unaware of the meaning of the term Cloud Governance and the tools that Azure offers to support it.\n  Obviously, the team acted in good faith by trying to limit each team\u0026rsquo;s scope2 of action.\nThinking to achieve two goals: cost control3 and security4.\nHere we now have the necessary elements to resume the transposition begun earlier and identify the ambit2 in the jacke, the release date in the date, and the five disciplines of Cloud Governance in the awareness.\nHere that to try to increase this awareness I created this repository\n binick / oh-my-azure-playground   whose intent is to define standards based on best practices that have emerged in areas such as resource naming, tag management and localization.\nOn which it will then be possible to define patterns for the definition of budget3.\nOver the years I\u0026rsquo;ve started several side projects but never had a post like this one.\nI see this as a first step towards a real commitment, if you would like to elaborate or feel the need to contribute please feel free to contact me 🙂 .\n  CapEx vs OpEx in Cloud Computing\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Understand scope for Azure RBAC\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n What is Cost Management + Billing?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Introduction to Azure security\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://binick.blog/2022/03/29/cloud-governance/","summary":"A few years ago, when I was commuting to work by car, there was a tree-lined stretch of country road along a stream. Within this area there was a very narrow chicane at the exit immediately following a slight descent that followed a long straight. Given the presence of the stream and the permanent shade caused by the trees, it was not uncommon that on some winter mornings there was the presence of ice.","title":"A new side project"},{"content":"I started working in remote mode in March 2020, the reason I guess we all know.\n However, if an extra-terrestrial were to read this post, he can find more information here https://wikipedia.org/wiki/COVID-19.\n My experience has been the same as that of so many others, a maximum and indiscriminate use of communication platforms and smoking ears at the end of the day.\nThis working mode went on for about a year and a half, 16 months to be precise, until July 2021 when I joined managed/designs.\nHere I found a different environment, which some would call smart. Devoted to personal growth and continuous improvement where autonomy and trust are two pillars on which the daily collaboration is based.\nPrologue. I\u0026rsquo;ve never been a user of to-do lists, perhaps due to inexperience or perhaps due to some belief unknown to me. The fact is that the systematic failure to follow the shopping list is proof of it \u0026ldquo;Nicola is not able to manage the lists\u0026rdquo;.\nOnce I became aware of this, I started looking for possible patterns and/or methodologies by identifying some that have accompanied me for a couple of months.\nMy inbox is not the email. I realized that what I need is not a list of tasks to do but rather a list of things that I would like to do or that somehow pique my interest. I suspect that on a subconscious level, my brain takes optimistically to the presence of that \u0026ldquo;would like\u0026rdquo; that removes the pressure for things that shouldn\u0026rsquo;t be there.\nI have three emails, the corporate one and two other historical ones that I\u0026rsquo;ve been carrying around for at least a decade, all three of which follow the philosophy of Inbox Zero by Merlin Mann. I currently flip through them twice a day, roughly before lunch and before the end of the day, these slots are recurring appointments on the calendar until next June 29, so we\u0026rsquo;ll see if they will be extended, but I think so.\nThe rule is very easy:\n it is important and must be executed at a specific time: an appointment is created on the calendar and archived in the corresponding inbox it is important: it ends up in the inbox and archived it interests me: it ends up in the inbox and deleted it doesn\u0026rsquo;t interest me: it ends up in the trash  In this way, I always have free inboxes and can keep my attention on those ten or so emails.\nIf an email comes in requesting an active response, I won\u0026rsquo;t run it right away, but like the others, it will follow the rules above.\nOne frog a day is enough. The other enlightening technique for me was the discovery of the 1-3-5 rule1 based on the practice of eating a frog as soon as you wake up2. Obviously not physically, I never want to wake up, and I\u0026rsquo;ve also been getting very little sleep lately!\nSo the day before I make a list of what I\u0026rsquo;d like to do the next day, applying some sort of empirical prioritization of activities of the moment while always making sure there\u0026rsquo;s at least one frog and possibly other filler activities.\nEpilogue. I have to be honest, at first I was skeptical about taking the time to plan my tomorrow. I have to reconsider. The benefits of freeing my brain from the burden of thinking about what to do so that I don\u0026rsquo;t run the risk of losing it forever is something to be reckoned with.\nRight now, the rigidity of the calendar and the flexibility that the 1-3-5 list leaves me with are a good match. Only time will tell if it is a winning choice for me.\n  Why You Never Finish Your To-Do Lists at Work (And How to Change That) by Alex Cavoulacos\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Eat That Frog: Brian Tracy Explains the Truth About Frogs by Brian Tracy\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://binick.blog/2022/02/18/daily-milestone/","summary":"I started working in remote mode in March 2020, the reason I guess we all know.\n However, if an extra-terrestrial were to read this post, he can find more information here https://wikipedia.org/wiki/COVID-19.\n My experience has been the same as that of so many others, a maximum and indiscriminate use of communication platforms and smoking ears at the end of the day.\nThis working mode went on for about a year and a half, 16 months to be precise, until July 2021 when I joined managed/designs.","title":"That time I tasted a frog"},{"content":"We will see how it\u0026rsquo;s possible to create a solution that integrates Azure Active Directory B2C to save on Blob Storage dummy data at user registration.\nSolution overview. The solution is composed as follows:\n Solution composition\n   read-customer-details-identity-la: represents the API whose purpose is to retrieve the content of the blob from customersstgacc (the storage account) customer-register-tpc: is the topic in which are collected the events of the creation of a new user customer-identity-details-filler-la: it represents the API that is in charge of generating fictitious data that will be saved inside a blob on the customersstgacc   contoso-b2c: is the access and identity management service offered by Azure  Introduction to Azure Event Grid. In Azure there is an implementation of the publish/subscribe pattern designed to facilitate integration and resource management via an event-driven development paradigm.\nThrough the Event Grid will be possible to subscribe to built-in message sources via a set of handlers.\nIf this is not enough, it is possible to create custom _topics to which you can subscribe to receive events.\nCreating a custom topic. You can refer to this guide to create a topic.\nOne choice to make when creating the topic concerns the scheme of the HTTP request content used. Currently, supported schemas are:\n Event Grid Schema Cloud Event Schema Custom Input Schema this schema will require the creation of an association between the properties of the input object and those required by the Event Grid Schema  The message used in this case has the following structure\n1[ 2 { 3 \u0026#34;data\u0026#34;: { 4 \u0026#34;objectId\u0026#34;: \u0026#34;25100647-****-4571-****-b03e4ce72d02\u0026#34; // unique user identifier 5 }, 6 \u0026#34;id\u0026#34;: \u0026#34;25100647-****-4571-****-b03e4ce72d02\u0026#34;, // unique message identifier, the same of `data.objectId` in this case 7 \u0026#34;eventType\u0026#34;: \u0026#34;Microsoft.ActiveDirectory\u0026#34;, 8 \u0026#34;subject\u0026#34;: \u0026#34;*.onmicrosoft.com\u0026#34;, 9 \u0026#34;dataVersion\u0026#34;: \u0026#34;1.0\u0026#34;, 10 \u0026#34;metadataVersion\u0026#34;: \u0026#34;1\u0026#34;, 11 \u0026#34;eventTime\u0026#34;: \u0026#34;2021-12-03T21:04:03.8504745Z\u0026#34;, 12 \u0026#34;topic\u0026#34;: \u0026#34;/subscriptions/{your-subscription-id}/resourceGroups/{your-resource-group}/providers/Microsoft.EventGrid/topics/{your-event-grid-topic}\u0026#34; 13 } 14] Issuing the registration event. Sending events to the topic is done using a RESTful technical profile.\n1\u0026lt;TechnicalProfile Id=\u0026#34;AAD-UserEmitRegistrationEvent\u0026#34;\u0026gt; 2 \u0026lt;DisplayName\u0026gt;Emit user registration event to Event Grid.\u0026lt;/DisplayName\u0026gt; 3 \u0026lt;Protocol Name=\u0026#34;Proprietary\u0026#34; Handler=\u0026#34;Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0026#34; /\u0026gt; 4 \u0026lt;Metadata\u0026gt; 5 \u0026lt;Item Key=\u0026#34;ServiceUrl\u0026#34;\u0026gt;{Settings:CustomerRegisteredTopicUrl}\u0026lt;/Item\u0026gt; 6 \u0026lt;Item Key=\u0026#34;AuthenticationType\u0026#34;\u0026gt;ApiKeyHeader\u0026lt;/Item\u0026gt; 7 \u0026lt;Item Key=\u0026#34;SendClaimsIn\u0026#34;\u0026gt;Body\u0026lt;/Item\u0026gt; 8 \u0026lt;Item Key=\u0026#34;ClaimUsedForRequestPayload\u0026#34;\u0026gt;userRegisterEvent\u0026lt;/Item\u0026gt; 9 \u0026lt;Item Key=\u0026#34;DefaultUserMessageIfRequestFailed\u0026#34;\u0026gt;Cannot process your request right now, please try again later.\u0026lt;/Item\u0026gt; 10 \u0026lt;/Metadata\u0026gt; 11 \u0026lt;CryptographicKeys\u0026gt; 12 \u0026lt;Key Id=\u0026#34;aeg-sas-key\u0026#34; StorageReferenceId=\u0026#34;B2C_1A_CustomerRegisteredTopicSas\u0026#34; /\u0026gt; 13 \u0026lt;/CryptographicKeys\u0026gt; 14 \u0026lt;InputClaimsTransformations\u0026gt; 15 \u0026lt;InputClaimsTransformation ReferenceId=\u0026#34;GetSystemDateTime\u0026#34; /\u0026gt; 16 \u0026lt;InputClaimsTransformation ReferenceId=\u0026#34;GenerateRegistrationEventRequest\u0026#34; /\u0026gt; 17 \u0026lt;/InputClaimsTransformations\u0026gt; 18 \u0026lt;InputClaims\u0026gt; 19 \u0026lt;InputClaim ClaimTypeReferenceId=\u0026#34;userRegisterEvent\u0026#34; /\u0026gt; 20 \u0026lt;/InputClaims\u0026gt; 21 \u0026lt;PersistedClaims\u0026gt; 22 \u0026lt;PersistedClaim ClaimTypeReferenceId=\u0026#34;systemDateTime\u0026#34; /\u0026gt; 23 \u0026lt;/PersistedClaims\u0026gt; 24 \u0026lt;UseTechnicalProfileForSessionManagement ReferenceId=\u0026#34;SM-AAD\u0026#34; /\u0026gt; 25\u0026lt;/TechnicalProfile\u0026gt; This fragment of markup translated into curl command, for more explicability, would look like this:\n1curl -X POST -H \u0026#34;aeg-sas-key: $key\u0026#34; -d \u0026#34;$event\u0026#34; $endpoint where the authentication requirements are met by the AuthenticationType metadata to which is associated the cryptographic key aeg-sas-key whose value is retrieved from the key B2C_1A_CustomerRegisteredTopicSas present in the collection of policy keys.\nTL;DR  The choice of the topic template in this example was guided by the limitations currently imposed by the RESTful technical profile regarding the possibilities of building the HTTP request, in fact for a combination of criteria it is not possible to pass information in the headers and the body of the request at the same time.\nThis makes it impossible to send towards a topic schemes of type Cloud Event since the protocol, in version 1.0 requires the presence of a mandatory header.\n \nMuch more complex is the creation of the body of the request for which it is necessary:\n use the InputClaimsTransformation add two statements inside the baggage userRegisterEvent and systemDateTime both of type string.  Finally, the technical profile has been added among the technical validation profiles of LocalAccountSignUpWithLogonEmail so that the event is issued only when a user is registered.\nUsing claim transformations. During the creation of custom criteria we could have the necessity to execute calculations, as the number of attempts of authentication, that even if very simple would result impossible without the execution of functions.\nThis requirement finds expressivity through the ClaimsTransformation whose reference of the transformations of the claims contains the complete list of the transformations usable.\nIn the example the methods GetCurrentDateTime and GenerateJson were used\n`` xml   \n The purpose of `GetSystemDateTime` is to enhance the `systemDateTime` claim. `` xml \u0026lt;ClaimsTransformation Id=\u0026quot;GenerateRegistrationEventRequest\u0026quot; TransformationMethod=\u0026quot;GenerateJson\u0026quot;\u0026gt; \u0026lt;InputClaims\u0026gt; \u0026lt;InputClaim ClaimTypeReferenceId=\u0026quot;objectId\u0026quot; TransformationClaimType=\u0026quot;0.data.objectId\u0026quot; /\u0026gt; \u0026lt;InputClaim ClaimTypeReferenceId=\u0026quot;objectId\u0026quot; TransformationClaimType=\u0026quot;0.id\u0026quot; /\u0026gt; \u0026lt;InputClaim ClaimTypeReferenceId=\u0026quot;systemDateTime\u0026quot; TransformationClaimType=\u0026quot;0.eventTime\u0026quot; /\u0026gt; \u0026lt;/InputClaims\u0026gt; \u0026lt;InputParameters\u0026gt; \u0026lt;InputParameter Id=\u0026quot;0.dataVersion\u0026quot; DataType=\u0026quot;string\u0026quot; Value=\u0026quot;1.0\u0026quot; /\u0026gt; \u0026lt;InputParameter Id=\u0026quot;0.eventType\u0026quot; DataType=\u0026quot;string\u0026quot; Value=\u0026quot;Microsoft.ActiveDirectory\u0026quot; /\u0026gt; \u0026lt;InputParameter Id=\u0026quot;0.subject\u0026quot; DataType=\u0026quot;string\u0026quot; Value=\u0026quot;{Settings:Tenant}\u0026quot; /\u0026gt; \u0026lt;/InputParameters\u0026gt; \u0026lt;OutputClaims\u0026gt; \u0026lt;OutputClaim ClaimTypeReferenceId=\u0026quot;userRegisterEvent\u0026quot; TransformationClaimType=\u0026quot;outputClaim\u0026quot; /\u0026gt; \u0026lt;/OutputClaims\u0026gt; \u0026lt;/ClaimsTransformation\u0026gt; GenerateRegistrationEventRequest has instead the burden of constructing the JSON and enhancing the userRegisterEvent claim.\nConclusions. In this article, we have seen how through Identity Experience Framework it is possible to integrate a B2C tenant with our infrastructure and open possible interesting development scenarios.\nTo do this we touched on Azure Event Grid and how to create an Event Grid Topic.\nFinally how you can manipulate attestations and use them within technical profiles.\nIf you are interested in the complete example you can find it at https://github.com/binick/samples/tree/master/src/enrich-a-jwt-token-with-ief.\n","permalink":"https://binick.blog/2022/01/08/aadb2c-subscribe-to-user-registration-event/","summary":"We will see how it\u0026rsquo;s possible to create a solution that integrates Azure Active Directory B2C to save on Blob Storage dummy data at user registration.\nSolution overview. The solution is composed as follows:\n Solution composition\n   read-customer-details-identity-la: represents the API whose purpose is to retrieve the content of the blob from customersstgacc (the storage account) customer-register-tpc: is the topic in which are collected the events of the creation of a new user customer-identity-details-filler-la: it represents the API that is in charge of generating fictitious data that will be saved inside a blob on the customersstgacc   contoso-b2c: is the access and identity management service offered by Azure  Introduction to Azure Event Grid.","title":"Develop integrated solutions with Active Directory B2C and Azure Event Grid."},{"content":"By code coverage, we mean the action of trying to measure how much of our code has been executed by our tests. This sound like\nTL;DR  Untested code is a broken code. Definitely a strong statement but true in a way, we don\u0026rsquo;t always manage to get enough coverage. Often this happens because we don\u0026rsquo;t have time, other times because despite having written tests we are not able to read the metrics.\n \nSo, how we can \u0026ldquo;humanize\u0026rdquo; code coverage metrics? And how we can generate its?\nTo answer at these questions I usually use two libraries.\n coverlet-coverage / coverlet   to gather metrics, and\n danielpalme / ReportGenerator   for generate human-readable reports.\nHow can set-up coverlet? I usually include coverlet.msbuild by MSBuild .targets Files - Visual Studio | Microsoft Docs.\n For alternative ways to include coverlet into yout test project see also coverlet-coverage/coverlet: Cross platform code coverage for .NET (github.com).\nHow can set-up ReportGenerator? In keeping with above to include ReportGenerator by MSBuild .targets Files - Visual Studio | Microsoft Docs.\n Also this tool offer a various way to use it, you can find all ways onto official documentation ReportGenerator - converts coverage reports generated by coverlet.\nHow to wire-up all that? To make everything work we need to add another MSBuild file.\n And include this into your test project, something like this\n1\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; 2 3 \u0026lt;PropertyGroup\u0026gt; 4 \u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; 5 \u0026lt;/PropertyGroup\u0026gt; 6 7 \u0026lt;Import Project=\u0026#34;Tests.targets\u0026#34; /\u0026gt; 8 9\u0026lt;/Project\u0026gt; Now everything you are able to run dotnet test you will able to inspect and analyze something like this\nI think that is an amazing tool to understand at a glance which codes are covered and which not.\nAnd now, how I can put it into Azure DevOps pipeline? It would be nice if this report came was published into the Build pipeline report, don\u0026rsquo;t you think? Maybe even include branch policies for it.\nWell that\u0026rsquo;s possible by use Publish Code Coverage Results task, something like this:\n1- task:PublishCodeCoverageResults@12displayName:Publish Code Coverage Results3inputs:4codeCoverageTool:\u0026#39;cobertura\u0026#39;5summaryFileLocation:\u0026#39;$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/Reports/Summary/Cobertura.xml\u0026#39;6continueOnError:true7condition:always()We notice the summaryFileLocation argument, this means that we will push only one file to Azure DevOps why?\nOne unwrite note of Publish Code Coverage Results task or limitation, I don\u0026rsquo;t know, is that the sum of covered lines, when we publish more reports, is take from the first file This results in an unreliable result.\nTo fix that problem we can marge multiple reports into a summary reports so that can be publish it only one. One way to make it is the follow\n and run MSBuild project into the pipeline with\n1- script:dotnet msbuild SummaryReportGenerator.proj /p:Configuration=$(Configuration)2name:GenerateCodeCoverageSummary3displayName:Generate code coverage summaryOnce you\u0026rsquo;ve done this the sum of covered lines on Build pipeline will true.\n","permalink":"https://binick.blog/2021/01/02/azure-devops-code-coverage/","summary":"By code coverage, we mean the action of trying to measure how much of our code has been executed by our tests. This sound like\nTL;DR  Untested code is a broken code. Definitely a strong statement but true in a way, we don\u0026rsquo;t always manage to get enough coverage. Often this happens because we don\u0026rsquo;t have time, other times because despite having written tests we are not able to read the metrics.","title":"How to include code coverage in Azure DevOps pipeline?"},{"content":"Sometimes we have been forced to work with JSON stored on table columns, it will have happened to you too!\nIn this post, I want to show you how to work with that using EntityFramework Core\n dotnet / efcore   Clearly this is one of many possible ways.\nWe could talk for a long time about the choice to store JSON into RDBMS is a good or bad choice, but the intent of this post isn\u0026rsquo;t making a rant.\nOk, well. First of all, take a look to JSON that we want to persist into a table column\n Our application has a requirement that makes it necessary to query the database with the name of the retailer that has stored in the JSON.\nThe retailer is the one who has the car we want to rent. The car is represented by the class\n The Car entity has a property public string NameOfRetailer { get; } that is computed by the Computed columns functionality.\n With this instruction efcore will inflate property with value returned by JSON_VALUE(Metadata, '$.Retailer.Name') expression, for more information about JSON_VALUE see at JSON_VALUE\nTo make it work, we need to persist the JSON into table column Metadata.\nWe can use the other useful Value conversions functionality of efcore.\n  Now, after that model configurations we are able to resolve this simple query var car = await context.Cars.MaterializeAsync(car =\u0026gt; car.NameOfRetailer == \u0026quot;Car Auto Orvieto\u0026quot;).ConfigureAwait(false); without materialize the entire dataset on the client. 🚀\nIf you want to learn more you can find the sample on my github repo ef-core-json\nHappy coding! 🐱‍👤\n","permalink":"https://binick.blog/2020/10/22/sqlserver-efcore-json/","summary":"Sometimes we have been forced to work with JSON stored on table columns, it will have happened to you too!\nIn this post, I want to show you how to work with that using EntityFramework Core\n dotnet / efcore   Clearly this is one of many possible ways.\nWe could talk for a long time about the choice to store JSON into RDBMS is a good or bad choice, but the intent of this post isn\u0026rsquo;t making a rant.","title":"SQL Server, EF Core, JSON"},{"content":"","permalink":"https://binick.blog/about-me/","summary":"About me","title":"About me"}]