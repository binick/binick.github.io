#!csharp

#r "nuget: System.ServiceModel.Syndication"
#r "nuget: Azure.Search.Documents"

#!csharp

// !!! WARNING !!! Don't expand this cell.
Environment.SetEnvironmentVariable("SEARCH_ENDPOINT", "***");
Environment.SetEnvironmentVariable("SEARCH_API_KEY", "***");

#!csharp

using System.Security.Cryptography;
using System.ServiceModel.Syndication;
using System.Text.Json;
using System.Xml;

using Azure;
using Azure.Core.Serialization;
using Azure.Search.Documents;
using Azure.Search.Documents.Indexes;
using Azure.Search.Documents.Indexes.Models;
using Azure.Search.Documents.Models;

#!csharp

var feeds = new string[] 
{
    "https://techcrunch.com/feed/",
    "https://blogs.microsoft.com/feed",
    "https://readwrite.com/feed",
    "https://www.wired.com/feed/rss",
    "https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml",
    "https://github.com/timeline"
};

#!csharp

public class Post 
{
    [SimpleField(IsKey = true)]
    public string Id { get; set; }
    
    [SearchableField()]
    public string Title { get; set; }
    
    [SearchableField()]
    public string Summary { get; set; }
    
    [SearchableField()]
    public string Content { get; set; }
    
    [SearchableField()]
    public string SourceFeed { get; set; }
    
    public DateTime PublishDate { get; set; }
    
    [SearchableField()]
    public IEnumerable<string> Links { get; set; }
    
    [SearchableField()]
    public IEnumerable<string> Categories { get; set; }
    
    [SearchableField()]
    public IEnumerable<string> Authors { get; set; }
    
    [SearchableField()]
    public IEnumerable<string> Contributors { get; set; }
    
    public DateTime LastUpdatedTime { get; set; }
    
    [SearchableField()]
    public string Copyright { get; set; }
}

#!csharp

public static Post Map(this SyndicationItem item)
{
    using var sha = SHA256.Create();
    
    var content = string.Empty;
    switch (item.Content)
    {
        case TextSyndicationContent textContent:
        {
            content = textContent.Text;
        }
        break;
        case UrlSyndicationContent urlContent:
        {
            content = urlContent.Url.ToString();
        }
        break;
        case XmlSyndicationContent xmlContent:
        {
            content = string.Empty;
        }
        break;
    }

    return new Post 
    {
        Id =  string.Join(null, sha.ComputeHash(Encoding.UTF8.GetBytes(item.Id)).Select(x => x.ToString("x2"))),
        Authors = item.Authors?.Select(p => p.Name),
        Categories = item.Categories?.Select(c => c.Name),
        Content = content,
        Copyright = item.Copyright?.Text,
        Contributors = item.Contributors?.Select(c => c.Name),
        LastUpdatedTime = item.LastUpdatedTime.UtcDateTime,
        PublishDate = item.PublishDate.UtcDateTime,
        Links = item.Links?.Select(l => l.Uri.ToString()),
        Summary = item.Summary?.Text,
        Title = item.Title?.Text,
        SourceFeed = item.SourceFeed?.Id
    };
}

public static IEnumerable<Post> Map(this IEnumerable<SyndicationItem> items)
{
    return items.Select(i => i.Map());
}

#!csharp

var indexName = "posts";

// Get the service endpoint and API key from the environment
var endpoint = new Uri(Environment.GetEnvironmentVariable("SEARCH_ENDPOINT"));
var credential = new AzureKeyCredential(Environment.GetEnvironmentVariable("SEARCH_API_KEY"));

#!csharp

var fieldBuilder = new FieldBuilder();
var searchFields = fieldBuilder.Build(typeof(Post));
var index = new SearchIndex(indexName, searchFields);

var indexClient = new SearchIndexClient(endpoint, credential);
var response = await indexClient.CreateOrUpdateIndexAsync(index);

#!csharp

var client = indexClient.GetSearchClient(indexName);
foreach (var url in feeds)
{
    using var reader = XmlReader.Create(url);
    var feed = SyndicationFeed.Load(reader);
    await client.MergeOrUploadDocumentsAsync(feed.Items.Map());
}

#!csharp

var options = new SearchOptions();

var posts = await client.SearchAsync<Post>("github", options);

#!csharp

posts.Value.GetResults()
